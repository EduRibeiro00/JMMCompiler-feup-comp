/* Parser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Parser.java */
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.io.IOException;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.File;
import java.util.HashSet;
import exceptions.SemanticParseException;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants, ParserConstants {/*@bgen(jjtree)*/
  protected JJTParserState jjtree = new JJTParserState();
    private int syntatcicExceptionCount = 0;                    /* Number of errors caught during parsing */
    private String syntacticErrorMessage = "";                  /* Error message associated with caught erros (while expression) */
    private int semanticExceptionCount = 0;
    private String semanticErrorMessage = "";
    private String semanticWarningMessage = "";
    private int parenthesisCount = 0;                            /* Parenthesis count for opening and closing parenthesis (parenthesisCount > 0 => more opening parenthesis than closing and vice versa) */
    private List<String> lines = new ArrayList<String>();       /* List of lines of the file to be read */
    private List<JVMInstruction> generatedLines = new ArrayList<JVMInstruction>();
    private final static int SYNTACTIC_MAX_NUM_ERRORS = 10;     /* Maximum amount of parsing errors that are recovered */
    private final static int SEMANTIC_MAX_NUM_ERRORS = 10;     /* Maximum amount of parsing errors that are recovered */
    private SimpleNode treeRoot = null;
    private BufferedWriter outputFile = null;
    private GeneralDescriptor symbolTable = null;
    public String fileName = null;

    private int lastLabelID = 0;

    /**
     * Initialize the lines array with the lines of the file to be parsed.
     */
    public void initFile(String fileName) {
        BufferedReader reader;
        this.fileName = fileName;
        try {
            reader = new BufferedReader(new FileReader(fileName));

            String line = reader.readLine();
            while (line != null) {
                lines.add(line);
                line = reader.readLine(); // read next line
            }

            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Function used to try to recover from erros on the while expression.
     * This functions skips tokens from the input until a stable point is found.
     */
    public int skipToToken() {

        Token nextToken = getToken(1);

        do {
            // Skip tokens until the eof is found, a left bracket or the while expression is closed.
            if (nextToken == null || nextToken.kind == LBRACKET || parenthesisCount == 0)
                break;

            if (nextToken.kind == LPAR) { // Increase the scope when a '(' is found
                parenthesisCount++;
            } else if (nextToken.kind == RPAR) { // Decrease the scope when a ')' is found
                parenthesisCount--;
            }

            // Advance a token
            getNextToken();
            nextToken = getToken(1);

        } while(true);


        int numParenthesisMissing = parenthesisCount;

        // Reset the scope value
        if (parenthesisCount > 0) {
            parenthesisCount = 0;
        }

        if (nextToken.kind == RPAR) {
            getNextToken();
        }

        return numParenthesisMissing;
    }

    /**
     * Function that handles while expressions' errors. It takes the exception generated inside the while
     * expression and tries to recover the error using 'skipToToken'.
     * This funcion also builds the error message associated with the parse exception and adds it to the global
     * error message, also increasing the error count.
     */
    public void handleWhileConditionError(ParseException e) throws ParseException{

        // Beginning of the error message
        String message = "> " + Colors.RED_BOLD + "Error" + Colors.RESET + " on line " + e.currentToken.next.beginLine + " column " + e.currentToken.next.beginColumn + ":\n";

        // Expected tokens
        String expected = "";

        // Tokens associated with expressions
        String[] expectedExpressionTokens = { "new", "true", "this", "false", "(", "!", "identifier", "integer" };
        boolean expectedExpression = false;

        // Go through all expected tokens and add them to the error message;
        for (int i = 0; i < e.expectedTokenSequences.length; i++) {
            for (int j = 0; j < e.expectedTokenSequences[i].length; j++) {
                if (i != 0 || j != 0)
                    expected += ", ";

                if (e.tokenImage[e.expectedTokenSequences[i][j]].equals("<IDENTIFIER>")) {
                    e.tokenImage[e.expectedTokenSequences[i][j]] = "identifier";
                } else if(e.tokenImage[e.expectedTokenSequences[i][j]].equals("<NUMERIC>")) {
                    e.tokenImage[e.expectedTokenSequences[i][j]] = "numeric";
                }

                expectedExpression = expectedExpression || Arrays.asList(expectedExpressionTokens).contains(e.tokenImage[e.expectedTokenSequences[i][j]]);

                expected += e.tokenImage[e.expectedTokenSequences[i][j]];
            }
        }

        // Error recovery
        int numParenthesisMissing = skipToToken();

        // Build found-expected segment of the error message
        if (expectedExpression)
            message += " found '" + e.currentToken.next.image + "', expected an expression (tokens " + expected + ").";
        else
            message += " found '" + e.currentToken.next.image + "', expected " + expected + ".";

        if (numParenthesisMissing > 0)
            message += "\n" + "The expression is missing the closure of " + numParenthesisMissing + " parenthesis.";


        // Add lines showing the line where the error occured and build an indicator underneath.
        // Indicator is only added if a file was read by initFile
        String indicator = "";
        String errorLine = "";

        if (!lines.isEmpty()) {

            errorLine = lines.get(e.currentToken.next.beginLine - 1);

            for(int i = 0; i < e.currentToken.next.beginColumn - 1; i++) {
                if (errorLine.charAt(i) == '\t')
                    indicator += "\t";
                else
                    indicator += " ";
            }

            indicator += Colors.GREEN + "^" + Colors.RESET;
        }

        // Add message to global error message
        this.syntacticErrorMessage += message +'\n'+ errorLine + "\n" + indicator + "\n";
        this.syntatcicExceptionCount++;

        // Check if the maximum amount of errors as been reached
        if (this.syntatcicExceptionCount >= SYNTACTIC_MAX_NUM_ERRORS) {
            throw new ParseException("Parser caught the maximum amount of errors (" + SYNTACTIC_MAX_NUM_ERRORS + " errors).");
        }
    }

    public void handleSemanticError(SemanticParseException exception, SimpleNode errorNode){

        // Beginning of the error message
        String message = "";
        if(exception.isError())
            message = "> " + Colors.RED_BOLD + "Error";
        else
            message = "> " + Colors.YELLOW_BOLD + "Warning";

        message += Colors.RESET + " on line " + errorNode.jjtGetFirstToken().beginLine + " column " + errorNode.jjtGetFirstToken().beginColumn + ":\n";
        message += exception.getMessage();
        // Add lines showing the line where the error occured and build an indicator underneath.
        // Indicator is only added if a file was read by initFile
        String indicator = "";
        String errorLine = "";

        if (!lines.isEmpty()) {

            errorLine = lines.get(errorNode.jjtGetFirstToken().beginLine  - 1);

            for(int i = 0; i < errorNode.jjtGetFirstToken().beginColumn  - 1; i++) {
                if (errorLine.charAt(i) == '\t')
                    indicator += "\t";
                else
                    indicator += " ";
            }

            indicator += Colors.GREEN + "^" + Colors.RESET;
        }

        // Add message to global error message
        if(exception.isError()){
            this.semanticErrorMessage += message +'\n'+ errorLine + "\n" + indicator + "\n";
            this.semanticExceptionCount++;
        }
        else{
            this.semanticWarningMessage += message +'\n'+ errorLine + "\n" + indicator + "\n";
        }

        // Check if the maximum amount of errors as been reached
        if (this.semanticExceptionCount >= SEMANTIC_MAX_NUM_ERRORS) {
            // throw new SemanticParseException("Parser caught the maximum amount of errors (" + SEMANTIC_MAX_NUM_ERRORS + " errors).");
        }
    }

    public void addInstruction(JVMInstruction newInstruction){

        this.generatedLines.add(newInstruction);
    }

    public void addBatchInstructions(List<JVMInstruction> newInstruction){

        this.generatedLines.addAll(newInstruction);
    }

    public boolean setCurrentStackLimit(){

        int currStackSize = 0;
        int currentMax = 0;
        int i;
        JVMInstruction stackInst = null;

        for(i = this.generatedLines.size() - 1; i >= 0; i--){

            JVMInstruction currentInstruction = this.generatedLines.get(i);

            if(currentInstruction.getInstruction().indexOf(".limit stack") != -1){

                stackInst = currentInstruction;
                break;
            }

        }

        if(stackInst == null)
            return false;

        for(i = i+1; i < this.generatedLines.size(); i++){

            JVMInstruction currentInstruction = this.generatedLines.get(i);


            currStackSize += currentInstruction.getStackDiff();
            currentMax = Math.max(currStackSize,currentMax);
            // System.out.println(currentInstruction.getInstruction() + " - "  + currentInstruction.getStackDiff() + " - " + currStackSize +  " - " +  currentMax);

        }

        stackInst.setInstruction(stackInst.getInstruction().replace("#",String.valueOf(currentMax))) ;

        return true;
    }

    public void startSemanthicAnalysis()  throws SemanticParseException, ParseException{

        if(this.treeRoot == null)
            return;

        this.symbolTable = new GeneralDescriptor();

        try {
            symbolTable.buildTable(this.treeRoot);
        } catch (IllegalArgumentException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        if(Main.showST)
            System.out.println(this.symbolTable.toString());
        // System.out.println("Starting analysis:");
        HashSet<String> variables =  new HashSet<String>();
        try {
            this.treeRoot.analyze(this.symbolTable, variables);
        } catch (SemanticParseException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        System.out.println(this.semanticWarningMessage);

        // Check if the maximum amount of errors as been reached
        if (this.semanticExceptionCount > 0) {
            throw new SemanticParseException(semanticErrorMessage, semanticExceptionCount);
        }

    }

    public void writeLine(String line){

        if(this.outputFile == null){
            return;
        }

        try{

            this.outputFile.write(line + "\n");
        }
        catch(IOException ex){

            ex.printStackTrace();
        }
    }

    public void startCodeGeneration(String fileName, String destDir) {

        if(this.fileName == null || this.treeRoot == null){
            System.out.println("Cannot generate code. Syntatic and semantic anlysis needed.");
        }

        try{
            File dir = new File(destDir);
            dir.mkdirs();
            File file = new File(destDir + fileName);
            this.outputFile = new BufferedWriter(new FileWriter(file));
            this.treeRoot.generateCode(this.symbolTable);

            for(int i = 0; i < this.generatedLines.size(); i++){
                this.writeLine(this.generatedLines.get(i).getInstruction());
            }

            this.outputFile.close();
        }
        catch(IOException ex){

            ex.printStackTrace();
        }
    }

    public String getLabel() {
        lastLabelID++;
        return "l" + lastLabelID;
    }

/**
 * Grammar productions
 */
  final public 
SimpleNode Program() throws ParseException {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(this, JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
this.syntatcicExceptionCount = 0;
        this.syntacticErrorMessage = "";
        this.parenthesisCount = 0;
      try {
        Imports();
        ClassDeclaration();
        jj_consume_token(0);
      } catch (ParseException e) {
// Add new error message to previous error messages and end the execution.
        this.syntatcicExceptionCount++;
        if (syntatcicExceptionCount > 0) {
            {if (true) throw new ParseException(e, syntacticErrorMessage, syntatcicExceptionCount);}
        }
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
// Check if any while expression error messages were caught
        if (syntatcicExceptionCount > 0) {
            {if (true) throw new ParseException(syntacticErrorMessage, syntatcicExceptionCount);}
        }

        this.treeRoot = jjtn000;
        {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Imports() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPORT:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Import();
      jj_consume_token(SCOLON);
    }
  }

// void ImportDeclaration() #void : {}
// {
//     <IMPORT>
//     (
//         ImportStatic()
//     |
//         ImportNotStatic()
//     )
//     <SCOLON>
// }

// void ImportStatic() #Import : { Token t; }
// {
//     <STATIC> { jjtThis.setStatic(true); }

//     t = <IDENTIFIER> { jjtThis.setClassName(t.image); }
//     <DOT>
//     t = <IDENTIFIER> { jjtThis.setMethodName(t.image); }

//     ImportParams()
// }

// void ImportNotStatic() #Import : { Token t; }
// {
//     t = <IDENTIFIER> { jjtThis.setClassName(t.image); } // if it only has one identifier, it's a constructor
//     (
//         <DOT>
//         t = <IDENTIFIER> { jjtThis.setMethodName(t.image); }

//         ImportParams()
//     )?
// }

// void ImportParams() #void : {}
// {
//     <LPAR> {
//         this.parenthesisCount++;
//     }

//     ((Type() (<COMMA> Type())*) | <VOID>)? #ParamList

//     <RPAR> {
//         this.parenthesisCount--;
//     }

//     (Type() | <VOID>)? #Return // if return type doesn't exist, assume it's void
// }
  final public 
void Import() throws ParseException {/*@bgen(jjtree) Import */
                ASTImport jjtn000 = new ASTImport(this, JJTIMPORT);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
                jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      jj_consume_token(IMPORT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STATIC:{
        jj_consume_token(STATIC);
jjtn000.setStatic(true);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      t = jj_consume_token(IDENTIFIER);
jjtn000.setClassName(t.image);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        jj_consume_token(DOT);
        t = jj_consume_token(IDENTIFIER);
jjtn000.setMethodName(t.image);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAR:{
        jj_consume_token(LPAR);
this.parenthesisCount++;
        ParamList();
        jj_consume_token(RPAR);
this.parenthesisCount--;
ASTReturn jjtn001 = new ASTReturn(this, JJTRETURN);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        try {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INT:
          case VOID:
          case BOOLEAN:
          case IDENTIFIER:{
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case INT:
            case BOOLEAN:
            case IDENTIFIER:{
              Type();
              break;
              }
            case VOID:{
              jj_consume_token(VOID);
              break;
              }
            default:
              jj_la1[3] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[4] = jj_gen;
            ;
          }
        } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void ParamList() throws ParseException {/*@bgen(jjtree) ParamList */
  ASTParamList jjtn000 = new ASTParamList(this, JJTPARAMLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case BOOLEAN:
      case IDENTIFIER:{
        Type();
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[6] = jj_gen;
            break label_2;
          }
          jj_consume_token(COMMA);
          Type();
        }
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void ClassDeclaration() throws ParseException {/*@bgen(jjtree) Class */
                                   ASTClass jjtn000 = new ASTClass(this, JJTCLASS);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);
                                   jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      jj_consume_token(CLASS);
      t = jj_consume_token(IDENTIFIER);
jjtn000.value = t.image;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXTENDS:{
        jj_consume_token(EXTENDS);
        t = jj_consume_token(IDENTIFIER);
ASTExtends jjtn001 = new ASTExtends(this, JJTEXTENDS);
                                     boolean jjtc001 = true;
                                     jjtree.openNodeScope(jjtn001);
                                     jjtn001.jjtSetFirstToken(getToken(1));
        try {
jjtree.closeNodeScope(jjtn001, true);
                                     jjtc001 = false;
                                     jjtn001.jjtSetLastToken(getToken(0));
jjtn001.value = t.image;
        } finally {
if (jjtc001) {
                                       jjtree.closeNodeScope(jjtn001, true);
                                       jjtn001.jjtSetLastToken(getToken(0));
                                     }
        }
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(LBRACKET);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT:
        case BOOLEAN:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          break label_3;
        }
        VarDeclaration();
        jj_consume_token(SCOLON);
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PUBLIC:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_4;
        }
        MethodDeclaration();
      }
      jj_consume_token(RBRACKET);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void VarDeclaration() throws ParseException {/*@bgen(jjtree) #VarDeclaration( 2) */
  ASTVarDeclaration jjtn000 = new ASTVarDeclaration(this, JJTVARDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Type();
      Identifier();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  2);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void MethodDeclaration() throws ParseException {/*@bgen(jjtree) Method */
                                     ASTMethod jjtn000 = new ASTMethod(this, JJTMETHOD);
                                     boolean jjtc000 = true;
                                     jjtree.openNodeScope(jjtn000);
                                     jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      jj_consume_token(PUBLIC);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case BOOLEAN:
      case IDENTIFIER:{
        Type();
        t = jj_consume_token(IDENTIFIER);
jjtn000.value = t.image;
        jj_consume_token(LPAR);
this.parenthesisCount++;
ASTParamList jjtn001 = new ASTParamList(this, JJTPARAMLIST);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        try {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INT:
          case BOOLEAN:
          case IDENTIFIER:{
            VarDeclaration();
            label_5:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case COMMA:{
                ;
                break;
                }
              default:
                jj_la1[11] = jj_gen;
                break label_5;
              }
              jj_consume_token(COMMA);
              VarDeclaration();
            }
            break;
            }
          default:
            jj_la1[12] = jj_gen;
            ;
          }
        } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
        jj_consume_token(RPAR);
this.parenthesisCount--;
        jj_consume_token(LBRACKET);
ASTBody jjtn002 = new ASTBody(this, JJTBODY);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtn002.jjtSetFirstToken(getToken(1));
        try {
          MethodBody();
        } catch (Throwable jjte002) {
if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
            jjtn002.jjtSetLastToken(getToken(0));
          }
        }
        jj_consume_token(RETURN);
ASTReturn jjtn003 = new ASTReturn(this, JJTRETURN);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
                   jjtn003.jjtSetFirstToken(getToken(1));
        try {
          Expression();
        } catch (Throwable jjte003) {
if (jjtc003) {
                     jjtree.clearNodeScope(jjtn003);
                     jjtc003 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte003 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte003;}
                   }
                   if (jjte003 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte003;}
                   }
                   {if (true) throw (Error)jjte003;}
        } finally {
if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003,  1);
                     jjtn003.jjtSetLastToken(getToken(0));
                   }
        }
        jj_consume_token(SCOLON);
        jj_consume_token(RBRACKET);
        break;
        }
      case STATIC:{
        jj_consume_token(STATIC);
        jj_consume_token(VOID);
        t = jj_consume_token(MAIN);
jjtn000.value = t.image;
                    jjtn000.isStatic = true;
        jj_consume_token(LPAR);
this.parenthesisCount++;
ASTParamList jjtn006 = new ASTParamList(this, JJTPARAMLIST);
          boolean jjtc006 = true;
          jjtree.openNodeScope(jjtn006);
          jjtn006.jjtSetFirstToken(getToken(1));
        try {
ASTVarDeclaration jjtn005 = new ASTVarDeclaration(this, JJTVARDECLARATION);
              boolean jjtc005 = true;
              jjtree.openNodeScope(jjtn005);
              jjtn005.jjtSetFirstToken(getToken(1));
          try {
            t = jj_consume_token(STRINGARR);
ASTType jjtn004 = new ASTType(this, JJTTYPE);
                                  boolean jjtc004 = true;
                                  jjtree.openNodeScope(jjtn004);
                                  jjtn004.jjtSetFirstToken(getToken(1));
            try {
jjtree.closeNodeScope(jjtn004, true);
                                  jjtc004 = false;
                                  jjtn004.jjtSetLastToken(getToken(0));
jjtn004.value = t.image;
            } finally {
if (jjtc004) {
                                    jjtree.closeNodeScope(jjtn004, true);
                                    jjtn004.jjtSetLastToken(getToken(0));
                                  }
            }
            Identifier();
          } catch (Throwable jjte005) {
if (jjtc005) {
                jjtree.clearNodeScope(jjtn005);
                jjtc005 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte005 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte005;}
              }
              if (jjte005 instanceof ParseException) {
                {if (true) throw (ParseException)jjte005;}
              }
              {if (true) throw (Error)jjte005;}
          } finally {
if (jjtc005) {
                jjtree.closeNodeScope(jjtn005,  2);
                jjtn005.jjtSetLastToken(getToken(0));
              }
          }
        } catch (Throwable jjte006) {
if (jjtc006) {
            jjtree.clearNodeScope(jjtn006);
            jjtc006 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte006 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte006;}
          }
          if (jjte006 instanceof ParseException) {
            {if (true) throw (ParseException)jjte006;}
          }
          {if (true) throw (Error)jjte006;}
        } finally {
if (jjtc006) {
            jjtree.closeNodeScope(jjtn006, true);
            jjtn006.jjtSetLastToken(getToken(0));
          }
        }
        jj_consume_token(RPAR);
this.parenthesisCount--;
        jj_consume_token(LBRACKET);
ASTBody jjtn007 = new ASTBody(this, JJTBODY);
          boolean jjtc007 = true;
          jjtree.openNodeScope(jjtn007);
          jjtn007.jjtSetFirstToken(getToken(1));
        try {
          MethodBody();
        } catch (Throwable jjte007) {
if (jjtc007) {
            jjtree.clearNodeScope(jjtn007);
            jjtc007 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte007 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte007;}
          }
          if (jjte007 instanceof ParseException) {
            {if (true) throw (ParseException)jjte007;}
          }
          {if (true) throw (Error)jjte007;}
        } finally {
if (jjtc007) {
            jjtree.closeNodeScope(jjtn007, true);
            jjtn007.jjtSetLastToken(getToken(0));
          }
        }
        jj_consume_token(RBRACKET);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void MethodBody() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case BOOLEAN:{
ASTVarDeclaration jjtn001 = new ASTVarDeclaration(this, JJTVARDECLARATION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
      try {
        TypeNoId();
        Identifier();
        jj_consume_token(SCOLON);
      } catch (Throwable jjte001) {
if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtn001.jjtSetLastToken(getToken(0));
      }
      }
      MethodBody();
      break;
      }
    case IDENTIFIER:{
      t = jj_consume_token(IDENTIFIER);
      StartsWithId(t);
      break;
      }
    case IF:
    case NEW:
    case TRUE:
    case THIS:
    case FALSE:
    case WHILE:
    case LBRACKET:
    case LPAR:
    case NOT:
    case NUMERIC:{
      NotIdStatement();
      Statements();
      break;
      }
    default:
      jj_la1[14] = jj_gen;

    }
  }

  final public void StartsWithId(Token t2) throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
ASTVarDeclaration jjtn003 = new ASTVarDeclaration(this, JJTVARDECLARATION);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
      jjtn003.jjtSetFirstToken(getToken(1));
      try {
ASTType jjtn001 = new ASTType(this, JJTTYPE);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
        try {
jjtree.closeNodeScope(jjtn001, true);
       jjtc001 = false;
       jjtn001.jjtSetLastToken(getToken(0));
jjtn001.value = t2.image;
        } finally {
if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
        }
        t = jj_consume_token(IDENTIFIER);
        jj_consume_token(SCOLON);
ASTIdentifier jjtn002 = new ASTIdentifier(this, JJTIDENTIFIER);
                                boolean jjtc002 = true;
                                jjtree.openNodeScope(jjtn002);
                                jjtn002.jjtSetFirstToken(getToken(1));
        try {
jjtree.closeNodeScope(jjtn002, true);
                                jjtc002 = false;
                                jjtn002.jjtSetLastToken(getToken(0));
jjtn002.value = t.image;
        } finally {
if (jjtc002) {
                                  jjtree.closeNodeScope(jjtn002, true);
                                  jjtn002.jjtSetLastToken(getToken(0));
                                }
        }
      } finally {
if (jjtc003) {
        jjtree.closeNodeScope(jjtn003,  2);
        jjtn003.jjtSetLastToken(getToken(0));
      }
      }
      MethodBody();
      break;
      }
    case LSQRBRACKET:
    case SCOLON:
    case EQUALS:
    case AND:
    case LESS:
    case PLUS:
    case MINUS:
    case MUL:
    case DIV:
    case DOT:{
ASTIdentifier jjtn004 = new ASTIdentifier(this, JJTIDENTIFIER);
      boolean jjtc004 = true;
      jjtree.openNodeScope(jjtn004);
      jjtn004.jjtSetFirstToken(getToken(1));
      try {
jjtree.closeNodeScope(jjtn004, true);
      jjtc004 = false;
      jjtn004.jjtSetLastToken(getToken(0));
jjtn004.value = t2.image;
      } finally {
if (jjtc004) {
        jjtree.closeNodeScope(jjtn004, true);
        jjtn004.jjtSetLastToken(getToken(0));
      }
      }
      StatementAfterId();
      jj_consume_token(SCOLON);
      Statements();
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
 * Statement productions
 */
  final public void Statements() throws ParseException {
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:
      case NEW:
      case TRUE:
      case THIS:
      case FALSE:
      case WHILE:
      case LBRACKET:
      case LPAR:
      case NOT:
      case IDENTIFIER:
      case NUMERIC:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_6;
      }
      Statement();
    }
  }

  final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF:
    case NEW:
    case TRUE:
    case THIS:
    case FALSE:
    case WHILE:
    case LBRACKET:
    case LPAR:
    case NOT:
    case NUMERIC:{
      NotIdStatement();
      break;
      }
    case IDENTIFIER:{
      IdStatement();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NotIdStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACKET:{
      jj_consume_token(LBRACKET);
ASTScope jjtn001 = new ASTScope(this, JJTSCOPE);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
                 jjtn001.jjtSetFirstToken(getToken(1));
      try {
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IF:
          case NEW:
          case TRUE:
          case THIS:
          case FALSE:
          case WHILE:
          case LBRACKET:
          case LPAR:
          case NOT:
          case IDENTIFIER:
          case NUMERIC:{
            ;
            break;
            }
          default:
            jj_la1[18] = jj_gen;
            break label_7;
          }
          Statement();
        }
      } catch (Throwable jjte001) {
if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte001;}
                 }
                 if (jjte001 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte001;}
                 }
                 {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                   jjtn001.jjtSetLastToken(getToken(0));
                 }
      }
      jj_consume_token(RBRACKET);
      break;
      }
    case IF:{
      IfStatement();
      break;
      }
    case WHILE:{
      WhileLoop();
      break;
      }
    case NEW:
    case TRUE:
    case THIS:
    case FALSE:
    case LPAR:
    case NOT:
    case NUMERIC:{
      ExpressionNotID();
      jj_consume_token(SCOLON);
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void IdStatement() throws ParseException {
    Identifier();
    StatementAfterId();
    jj_consume_token(SCOLON);
  }

  final public void StatementAfterId() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUALS:{
      jj_consume_token(EQUALS);
ASTAssignment jjtn001 = new ASTAssignment(this, JJTASSIGNMENT);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
               jjtn001.jjtSetFirstToken(getToken(1));
      try {
        Expression();
      } catch (Throwable jjte001) {
if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte001;}
               }
               if (jjte001 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte001;}
               }
               {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  2);
                 jjtn001.jjtSetLastToken(getToken(0));
               }
      }
      break;
      }
    case LSQRBRACKET:{
      ArrayAccess();
      ArrayStatement();
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      ExpNotArray();
    }
  }

  final public void IfStatement() throws ParseException {/*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(this, JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IF);
      Condition();
      Statement();
      jj_consume_token(ELSE);
      Statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void WhileLoop() throws ParseException {/*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(this, JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      try {
        jj_consume_token(WHILE);
        Condition();
      } catch (ParseException e) {
handleWhileConditionError(e);
      }
      Statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Condition() throws ParseException {/*@bgen(jjtree) Condition */
  ASTCondition jjtn000 = new ASTCondition(this, JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LPAR);
this.parenthesisCount++;
      Expression();
      jj_consume_token(RPAR);
jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             jjtn000.jjtSetLastToken(getToken(0));
this.parenthesisCount--;
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Identifier() throws ParseException {/*@bgen(jjtree) Identifier */
                                  ASTIdentifier jjtn000 = new ASTIdentifier(this, JJTIDENTIFIER);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);
                                  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.jjtSetLastToken(getToken(0));
jjtn000.value = t.image;
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Type() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      t = jj_consume_token(IDENTIFIER);
ASTType jjtn001 = new ASTType(this, JJTTYPE);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                       jjtn001.jjtSetFirstToken(getToken(1));
      try {
jjtree.closeNodeScope(jjtn001, true);
                       jjtc001 = false;
                       jjtn001.jjtSetLastToken(getToken(0));
jjtn001.value = t.image;
      } finally {
if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001, true);
                         jjtn001.jjtSetLastToken(getToken(0));
                       }
      }
      break;
      }
    case INT:
    case BOOLEAN:{
      TypeNoId();
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TypeNoId() throws ParseException {/*@bgen(jjtree) Type */
                          ASTType jjtn000 = new ASTType(this, JJTTYPE);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
                          jjtn000.jjtSetFirstToken(getToken(1));Token t; Boolean b = false;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:{
        t = jj_consume_token(BOOLEAN);
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.jjtSetLastToken(getToken(0));
jjtn000.value = t.image;
        break;
        }
      case INT:{
        t = jj_consume_token(INT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LSQRBRACKET:{
          jj_consume_token(LSQRBRACKET);
          jj_consume_token(RSQRBRACKET);
b = true;
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          ;
        }
jjtree.closeNodeScope(jjtn000, true);
                                                                  jjtc000 = false;
                                                                  jjtn000.jjtSetLastToken(getToken(0));
if (b)
                jjtn000.value = t.image + "[]";
            else
                jjtn000.value = t.image;
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void ArrayStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUALS:{
      jj_consume_token(EQUALS);
ASTAssignment jjtn001 = new ASTAssignment(this, JJTASSIGNMENT);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
               jjtn001.jjtSetFirstToken(getToken(1));
      try {
        Expression();
      } catch (Throwable jjte001) {
if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte001;}
               }
               if (jjte001 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte001;}
               }
               {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  2);
                 jjtn001.jjtSetLastToken(getToken(0));
               }
      }
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      ExpNoLeftTerminal();
    }
  }

  final public void DotMethod() throws ParseException {/*@bgen(jjtree) Identifier */
                                 ASTIdentifier jjtn000 = new ASTIdentifier(this, JJTIDENTIFIER);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
                                 jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LENGTH:{
        t = jj_consume_token(LENGTH);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.jjtSetLastToken(getToken(0));
jjtn000.value = t.image;
        break;
        }
      case IDENTIFIER:{
        t = jj_consume_token(IDENTIFIER);
jjtn000.value = t.image;
        jj_consume_token(LPAR);
this.parenthesisCount++;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEW:
        case TRUE:
        case THIS:
        case FALSE:
        case LPAR:
        case NOT:
        case IDENTIFIER:
        case NUMERIC:{
          Expression();
          label_8:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMA:{
              ;
              break;
              }
            default:
              jj_la1[25] = jj_gen;
              break label_8;
            }
            jj_consume_token(COMMA);
            Expression();
          }
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          ;
        }
        jj_consume_token(RPAR);
jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             jjtn000.jjtSetLastToken(getToken(0));
this.parenthesisCount--;
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void ArrayAccess() throws ParseException {/*@bgen(jjtree) #ArrayAccess( 2) */
  ASTArrayAccess jjtn000 = new ASTArrayAccess(this, JJTARRAYACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LSQRBRACKET);
      Expression();
      jj_consume_token(RSQRBRACKET);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  2);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

/**
 * Expression productions
 */
  final public void Expression() throws ParseException {
    Exp1();
    ExpressionPrime();
  }

  final public void ExpressionPrime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:{
      jj_consume_token(AND);
ASTAnd jjtn001 = new ASTAnd(this, JJTAND);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
      try {
        Exp1();
      } catch (Throwable jjte001) {
if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
              jjtn001.jjtSetLastToken(getToken(0));
            }
      }
      ExpressionPrime();
      break;
      }
    default:
      jj_la1[28] = jj_gen;

    }
  }

  final public void Exp1() throws ParseException {
    Exp2();
    Exp1Prime();
  }

  final public void Exp1Prime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LESS:{
      jj_consume_token(LESS);
ASTLess jjtn001 = new ASTLess(this, JJTLESS);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
             jjtn001.jjtSetFirstToken(getToken(1));
      try {
        Exp2();
      } catch (Throwable jjte001) {
if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte001;}
             }
             if (jjte001 instanceof ParseException) {
               {if (true) throw (ParseException)jjte001;}
             }
             {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
               jjtn001.jjtSetLastToken(getToken(0));
             }
      }
      Exp1Prime();
      break;
      }
    default:
      jj_la1[29] = jj_gen;

    }
  }

  final public void Exp2() throws ParseException {
    Exp3();
    Exp2Prime();
  }

  final public void Exp2Prime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:{
      jj_consume_token(PLUS);
ASTAdd jjtn001 = new ASTAdd(this, JJTADD);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
             jjtn001.jjtSetFirstToken(getToken(1));
      try {
        Exp3();
      } catch (Throwable jjte001) {
if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte001;}
             }
             if (jjte001 instanceof ParseException) {
               {if (true) throw (ParseException)jjte001;}
             }
             {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
               jjtn001.jjtSetLastToken(getToken(0));
             }
      }
      Exp2Prime();
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
ASTSub jjtn002 = new ASTSub(this, JJTSUB);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
              jjtn002.jjtSetFirstToken(getToken(1));
      try {
        Exp3();
      } catch (Throwable jjte002) {
if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte002;}
              }
              if (jjte002 instanceof ParseException) {
                {if (true) throw (ParseException)jjte002;}
              }
              {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  2);
                jjtn002.jjtSetLastToken(getToken(0));
              }
      }
      Exp2Prime();
      break;
      }
    default:
      jj_la1[30] = jj_gen;

    }
  }

  final public void Exp3() throws ParseException {
    Exp4();
    Exp3Prime();
  }

  final public void Exp3Prime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MUL:{
      jj_consume_token(MUL);
ASTMul jjtn001 = new ASTMul(this, JJTMUL);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
      try {
        Exp4();
      } catch (Throwable jjte001) {
if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
              jjtn001.jjtSetLastToken(getToken(0));
            }
      }
      Exp3Prime();
      break;
      }
    case DIV:{
      jj_consume_token(DIV);
ASTDiv jjtn002 = new ASTDiv(this, JJTDIV);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
      try {
        Exp4();
      } catch (Throwable jjte002) {
if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte002;}
            }
            if (jjte002 instanceof ParseException) {
              {if (true) throw (ParseException)jjte002;}
            }
            {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  2);
              jjtn002.jjtSetLastToken(getToken(0));
            }
      }
      Exp3Prime();
      break;
      }
    default:
      jj_la1[31] = jj_gen;

    }
  }

  final public void Exp4() throws ParseException {
    Exp5();
    Exp4Prime();
  }

  final public void Exp4Prime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOT:{
      jj_consume_token(DOT);
ASTMethodCall jjtn001 = new ASTMethodCall(this, JJTMETHODCALL);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
      try {
        DotMethod();
      } catch (Throwable jjte001) {
if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
              jjtn001.jjtSetLastToken(getToken(0));
            }
      }
      Exp5Prime();
      Exp4Prime();
      break;
      }
    default:
      jj_la1[32] = jj_gen;

    }
  }

  final public void Exp5() throws ParseException {
    ExpTerminal();
    Exp5Prime();
  }

  final public void Exp5Prime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LSQRBRACKET:{
      ArrayAccess();
      Exp5Prime();
      break;
      }
    default:
      jj_la1[33] = jj_gen;

    }
  }

/**
 * Expression that doesn't accept an identifier as its leftmost terminal
 */
  final public void ExpressionNotID() throws ParseException {
    Exp1NotID();
    ExpressionPrime();
  }

  final public void Exp1NotID() throws ParseException {
    Exp2NotID();
    Exp1Prime();
  }

  final public void Exp2NotID() throws ParseException {
    Exp3NotID();
    Exp2Prime();
  }

  final public void Exp3NotID() throws ParseException {
    Exp4NotID();
    Exp3Prime();
  }

  final public void Exp4NotID() throws ParseException {
    Exp5NotID();
    Exp4Prime();
  }

  final public void Exp5NotID() throws ParseException {
    ExpTerminalNotID();
    Exp5Prime();
  }

/**
 * Expression that can't have an array access at the leftmost position
 */
  final public void ExpNotArray() throws ParseException {
    Exp1NotArray();
    ExpressionPrime();
  }

  final public void Exp1NotArray() throws ParseException {
    Exp2NotArray();
    Exp1Prime();
  }

  final public void Exp2NotArray() throws ParseException {
    Exp3NotArray();
    Exp2Prime();
  }

  final public void Exp3NotArray() throws ParseException {
    Exp4Prime();
    Exp3Prime();
  }

/**
 * Expression that doesn't have a left most "terminal" (i. e. starts with an operator)
 */
  final public void ExpNoLeftTerminal() throws ParseException {
    Exp1NoLeftTerminal();
    ExpressionPrime();
  }

  final public void Exp1NoLeftTerminal() throws ParseException {
    Exp2NoLeftTerminal();
    Exp1Prime();
  }

  final public void Exp2NoLeftTerminal() throws ParseException {
    Exp3NoLeftTerminal();
    Exp2Prime();
  }

  final public void Exp3NoLeftTerminal() throws ParseException {
    Exp4NoLeftTerminal();
    Exp3Prime();
  }

  final public void Exp4NoLeftTerminal() throws ParseException {
    Exp5NoLeftTerminal();
    Exp4Prime();
  }

  final public void Exp5NoLeftTerminal() throws ParseException {
    Exp5Prime();
  }

  final public void ExpTerminal() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NEW:
    case TRUE:
    case THIS:
    case FALSE:
    case LPAR:
    case NOT:
    case NUMERIC:{
      ExpTerminalNotID();
      break;
      }
    case IDENTIFIER:{
      Identifier();
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ExpTerminalNotID() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAR:{
      jj_consume_token(LPAR);
this.parenthesisCount++;
      Expression();
      jj_consume_token(RPAR);
this.parenthesisCount--;
      break;
      }
    case NOT:{
      jj_consume_token(NOT);
ASTNot jjtn001 = new ASTNot(this, JJTNOT);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
      try {
        Exp5();
        Exp4Prime();
      } catch (Throwable jjte001) {
if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  1);
              jjtn001.jjtSetLastToken(getToken(0));
            }
      }
      break;
      }
    case NUMERIC:{
      t = jj_consume_token(NUMERIC);
ASTNumeric jjtn002 = new ASTNumeric(this, JJTNUMERIC);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                    jjtn002.jjtSetFirstToken(getToken(1));
      try {
jjtree.closeNodeScope(jjtn002, true);
                    jjtc002 = false;
                    jjtn002.jjtSetLastToken(getToken(0));
jjtn002.value = t.image;
      } finally {
if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                      jjtn002.jjtSetLastToken(getToken(0));
                    }
      }
      break;
      }
    case TRUE:{
      t = jj_consume_token(TRUE);
ASTBoolean jjtn003 = new ASTBoolean(this, JJTBOOLEAN);
                 boolean jjtc003 = true;
                 jjtree.openNodeScope(jjtn003);
                 jjtn003.jjtSetFirstToken(getToken(1));
      try {
jjtree.closeNodeScope(jjtn003, true);
                 jjtc003 = false;
                 jjtn003.jjtSetLastToken(getToken(0));
jjtn003.value = t.image;
      } finally {
if (jjtc003) {
                   jjtree.closeNodeScope(jjtn003, true);
                   jjtn003.jjtSetLastToken(getToken(0));
                 }
      }
      break;
      }
    case FALSE:{
      t = jj_consume_token(FALSE);
ASTBoolean jjtn004 = new ASTBoolean(this, JJTBOOLEAN);
                  boolean jjtc004 = true;
                  jjtree.openNodeScope(jjtn004);
                  jjtn004.jjtSetFirstToken(getToken(1));
      try {
jjtree.closeNodeScope(jjtn004, true);
                  jjtc004 = false;
                  jjtn004.jjtSetLastToken(getToken(0));
jjtn004.value = t.image;
      } finally {
if (jjtc004) {
                    jjtree.closeNodeScope(jjtn004, true);
                    jjtn004.jjtSetLastToken(getToken(0));
                  }
      }
      break;
      }
    case THIS:{
ASTThis jjtn005 = new ASTThis(this, JJTTHIS);
      boolean jjtc005 = true;
      jjtree.openNodeScope(jjtn005);
      jjtn005.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(THIS);
      } finally {
if (jjtc005) {
        jjtree.closeNodeScope(jjtn005, true);
        jjtn005.jjtSetLastToken(getToken(0));
      }
      }
      break;
      }
    case NEW:{
      jj_consume_token(NEW);
ASTNew jjtn008 = new ASTNew(this, JJTNEW);
      boolean jjtc008 = true;
      jjtree.openNodeScope(jjtn008);
      jjtn008.jjtSetFirstToken(getToken(1));
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT:{
          t = jj_consume_token(INT);
          jj_consume_token(LSQRBRACKET);
          Expression();
          jj_consume_token(RSQRBRACKET);
ASTType jjtn006 = new ASTType(this, JJTTYPE);
          boolean jjtc006 = true;
          jjtree.openNodeScope(jjtn006);
          jjtn006.jjtSetFirstToken(getToken(1));
          try {
jjtree.closeNodeScope(jjtn006,  1);
          jjtc006 = false;
          jjtn006.jjtSetLastToken(getToken(0));
jjtn006.value = t.image + "[]";
          } finally {
if (jjtc006) {
            jjtree.closeNodeScope(jjtn006,  1);
            jjtn006.jjtSetLastToken(getToken(0));
          }
          }
          break;
          }
        case IDENTIFIER:{
          t = jj_consume_token(IDENTIFIER);
          jj_consume_token(LPAR);
this.parenthesisCount++;
ASTType jjtn007 = new ASTType(this, JJTTYPE);
          boolean jjtc007 = true;
          jjtree.openNodeScope(jjtn007);
          jjtn007.jjtSetFirstToken(getToken(1));
          try {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case NEW:
            case TRUE:
            case THIS:
            case FALSE:
            case LPAR:
            case NOT:
            case IDENTIFIER:
            case NUMERIC:{
              Expression();
              label_9:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case COMMA:{
                  ;
                  break;
                  }
                default:
                  jj_la1[35] = jj_gen;
                  break label_9;
                }
                jj_consume_token(COMMA);
                Expression();
              }
              break;
              }
            default:
              jj_la1[36] = jj_gen;
              ;
            }
jjtree.closeNodeScope(jjtn007, true);
                                                   jjtc007 = false;
                                                   jjtn007.jjtSetLastToken(getToken(0));
jjtn007.value = t.image;
          } catch (Throwable jjte007) {
if (jjtc007) {
            jjtree.clearNodeScope(jjtn007);
            jjtc007 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte007 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte007;}
          }
          if (jjte007 instanceof ParseException) {
            {if (true) throw (ParseException)jjte007;}
          }
          {if (true) throw (Error)jjte007;}
          } finally {
if (jjtc007) {
            jjtree.closeNodeScope(jjtn007, true);
            jjtn007.jjtSetLastToken(getToken(0));
          }
          }
          jj_consume_token(RPAR);
jjtree.closeNodeScope(jjtn008, true);
                 jjtc008 = false;
                 jjtn008.jjtSetLastToken(getToken(0));
this.parenthesisCount--;
          break;
          }
        default:
          jj_la1[37] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte008) {
if (jjtc008) {
        jjtree.clearNodeScope(jjtn008);
        jjtc008 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte008 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte008;}
      }
      if (jjte008 instanceof ParseException) {
        {if (true) throw (ParseException)jjte008;}
      }
      {if (true) throw (Error)jjte008;}
      } finally {
if (jjtc008) {
        jjtree.closeNodeScope(jjtn008, true);
        jjtn008.jjtSetLastToken(getToken(0));
      }
      }
      break;
      }
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[39];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100000,0x20000,0x0,0x201200,0x201200,0x4000000,0x80000000,0x200200,0x400000,0x200200,0x80,0x80000000,0x200200,0x220200,0x5a08f20,0x50000000,0x5808d20,0x5808d20,0x5808d20,0x5808d20,0x10000000,0x200200,0x10000000,0x200200,0x0,0x80000000,0x4008d00,0x40000,0x0,0x0,0x0,0x0,0x0,0x10000000,0x4008d00,0x80000000,0x4008d00,0x200,0x4008d00,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x80,0x200,0x200,0x0,0x0,0x200,0x0,0x200,0x0,0x0,0x200,0x200,0x700,0x2ff,0x700,0x700,0x700,0x500,0x1,0x200,0x0,0x0,0x1,0x0,0x700,0x200,0x2,0x4,0x18,0x60,0x80,0x0,0x700,0x0,0x700,0x200,0x500,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
      token_source = new ParserTokenManager(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[51];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 39; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 51; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
