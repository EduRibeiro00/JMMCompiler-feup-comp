import exceptions.SemanticParseException;

import java.util.BitSet;
import java.util.HashSet;
import java.util.List;

/* Generated By:JJTree: Do not edit this line. ASTWhile.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public class ASTWhile extends SimpleNode {
    public ASTWhile(int id) {
        super(id);
    }

    public ASTWhile(Parser p, int id) {
        super(p, id);
    }

    @Override
    public String analyze(Descriptor descriptor, HashSet<String> variables) throws SemanticParseException {
        MethodDescriptor methodDescriptor = (MethodDescriptor) descriptor;
        try {
            this.jjtGetChild(0).analyze(methodDescriptor, variables);
        } catch (SemanticParseException ex) {

            // TODO: Auto-generated catch block
            // ex.printStackTrace();
        }

        try {
            HashSet<String> cloned = new HashSet<String>();
            cloned = (HashSet) variables.clone();

            this.jjtGetChild(1).analyze(descriptor, cloned);
            for (String variable : cloned)
                methodDescriptor.searchVariable(variable).setProgression();
        } catch (SemanticParseException ex) {
            // TODO: Auto-generated catch block
            // ex.printStackTrace();
        }

        return "";
    }

    @Override
    public void generateCode(Descriptor descriptor) {
        int whileNumber = JVMHelper.getWhileLabel();

        parser.addInstruction(new JVMInstruction("WHILE_" + whileNumber + ":", 0));

        // Generate Condition
        // TODO: ver se pode ser null
        if (this.jjtGetChild(0).jjtGetChild(0) instanceof ASTLess)
            this.generateLessCondition(descriptor, whileNumber);
        else {
            this.jjtGetChild(0).generateCode(descriptor);
            parser.addInstruction(new JVMInstruction("ifeq END_WHILE_" + whileNumber, -1));
        }

        // Generate Body

        this.jjtGetChild(1).generateCode(descriptor);

        if(!(this.jjtGetChild(1) instanceof ASTScope)){
            if(! (this.jjtGetChild(1) instanceof ASTVarDeclaration)){

				if(this.jjtGetChild(1) .getReturnType() != null && this.jjtGetChild(1).getReturnType() != "void" )
					parser.addInstruction(new JVMInstruction("pop",-1));
			}
        }

        parser.addInstruction(new JVMInstruction("goto WHILE_" + whileNumber, 0));
        parser.addInstruction(new JVMInstruction("END_WHILE_" + whileNumber + ":", 0));
    }

    // TODO: talvez refactor pq parecido com while??
    public void generateLessCondition(Descriptor descriptor, int whileLabel) {
        SimpleNode astLess = this.jjtGetChild(0).jjtGetChild(0);
        SimpleNode lhsNode = astLess.jjtGetChild(0);
        SimpleNode rhsNode = astLess.jjtGetChild(1);

        if (lhsNode instanceof ASTNumeric && Integer.parseInt((String) lhsNode.jjtGetValue()) == 0) {
            // 0 < x <=> x > 0 -> x =< 0
            rhsNode.generateCode(descriptor);
            parser.addInstruction(new JVMInstruction("ifle END_WHILE_" + whileLabel, -1));
        } else if (rhsNode instanceof ASTNumeric && Integer.parseInt((String) rhsNode.jjtGetValue()) == 0) {
            // x < 0 -> x >= 0
            lhsNode.generateCode(descriptor);
            parser.addInstruction(new JVMInstruction("ifge END_WHILE_" + whileLabel, -1));
        } else {
            // e < D -> esquerda >= direita
            lhsNode.generateCode(descriptor);
            rhsNode.generateCode(descriptor);

            parser.addInstruction(new JVMInstruction("if_icmpge END_WHILE_" + whileLabel, -2));
        }
    }

    @Override
    public void generateCFG(List<BitSet> use, List<BitSet> def, List<BitSet> succ, MethodDescriptor mDescriptor) {

        // Generate condition
        ASTCondition cond = (ASTCondition) this.jjtGetChild(0);
        int nodeID = succ.size();
        cond.generateCFG(use, def, succ, mDescriptor);

        // Generate scope
        // ASTScope scope = (ASTScope) this.jjtGetChild(1);
        this.jjtGetChild(1).generateCFG(use, def, succ, mDescriptor);

        // Make last while instruction point to condition
        succ.get(succ.size() - 1).clear();
        succ.get(succ.size() - 1).set(nodeID);

        // Add dummy instruction after the while
        BitSet useBoot = new BitSet(mDescriptor.getLocalsCount());
        BitSet defBoot = new BitSet(mDescriptor.getLocalsCount());
        BitSet succBoot = new BitSet();
        use.add(useBoot);
        def.add(defBoot);
        succ.add(succBoot);

        // Make dummy instruction point forward
        succBoot.set(succ.size());

        // Make condition point to dummy instruction
        succ.get(nodeID).set(succ.size() - 1);

    }
}
/*
 * JavaCC - OriginalChecksum=5f4455af0142b2fe9a424f1a313045fd (do not edit this
 * line)
 */
