import exceptions.SemanticParseException;
import java.util.HashSet; 

/* Generated By:JJTree: Do not edit this line. ASTDiv.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public class ASTDiv extends SimpleNode {
    public ASTDiv(int id) {
        super(id);
        this.returnType = "int";
    }

    public ASTDiv(Parser p, int id) {
        super(p, id);
        this.returnType = "int";
    }

    @Override
    public String analyze(Descriptor descriptor, HashSet<String> variables) throws SemanticParseException{
        MethodDescriptor functionST = (MethodDescriptor) descriptor;

        SimpleNode lhsNode = this.jjtGetChild(0);
        SimpleNode rhsNode = this.jjtGetChild(1);

        String lhsType = lhsNode.analyze(functionST, variables);
        String rhsType = rhsNode.analyze(functionST, variables);

        if (!lhsType.equals(this.returnType) || !rhsType.equals(this.returnType))
			this.parser.handleSemanticError(new SemanticParseException("Wrong types in division: " + lhsNode.jjtGetValue() + "[" + lhsType + "]"
            + " and " + rhsNode.jjtGetValue() + "[" + rhsType + "]"), this);

        return this.returnType;
    }

    @Override
	public void generateCode(Descriptor descriptor){

        SimpleNode lhsNode = this.jjtGetChild(0);
        SimpleNode rhsNode = this.jjtGetChild(1);

        lhsNode.generateCode(descriptor);
        
        // X / 2 ^ s: s max = 5 bits 31
        if(rhsNode instanceof ASTNumeric){
            int den = Integer.parseInt((String) rhsNode.jjtGetValue());
            int s = powerOfTwo(den);
            if( s >= 0 && s <= 31){
                parser.addInstruction(JVMHelper.loadNumber((int) s));
                parser.addInstruction(new JVMInstruction("ishr",-1));
                return;
            }
        }

		rhsNode.generateCode(descriptor);
		parser.addInstruction(new JVMInstruction("idiv",-1));
    }
    
    public int powerOfTwo(int n) 
    { 
        if ((int)(Math.ceil((Math.log(n) / Math.log(2))))  == (int)(Math.floor(((Math.log(n) / Math.log(2))))))
            return (int) (Math.log(n) / Math.log(2));
        return -1;
    } 
}
/*
 * JavaCC - OriginalChecksum=a6ae99679f76890aff99ebcee897988e (do not edit this
 * line)
 */
