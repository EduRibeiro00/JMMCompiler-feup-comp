import exceptions.SemanticParseException;
import java.util.ArrayList;
import java.util.HashSet; 
import java.util.List;
import java.util.BitSet;

/* Generated By:JJTree: Do not edit this line. ASTMethod.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public class ASTMethod extends SimpleNode {

	boolean isStatic;

	public ASTMethod(int id) {
		super(id);
	}

	public ASTMethod(Parser p, int id) {
		super(p, id);
		this.isStatic = false;
	}

	public void setStatic(boolean isStatic) {
		this.isStatic = isStatic;
	}

	public boolean isStatic() {
		return this.isStatic;
	}
	
	@Override
	public String analyze(Descriptor descriptor, HashSet<String> variables) throws SemanticParseException{
		variables = new HashSet<>();
		ClassDescriptor classDescriptor = ((ClassDescriptor) descriptor);
		MethodDescriptor methodDescriptor = null;
		boolean isMain = "main".equals((String)this.jjtGetValue());
        for(int i = 0; i < this.jjtGetNumChildren(); i++){
            if(this.jjtGetChild(i) instanceof ASTParamList)
                methodDescriptor = classDescriptor.getMethod((String)this.jjtGetValue(), ((ASTParamList)this.jjtGetChild(i)).getParamTypes());
            else if(this.jjtGetChild(i) instanceof ASTBody){
                if(isMain)
                    methodDescriptor = classDescriptor.getMainFunction();
				if(methodDescriptor == null){

					SemanticParseException ex = new SemanticParseException("ParamList was not defined/Couldn't get methodDescriptor: " + this.jjtGetValue());
					this.parser.handleSemanticError(ex, this);
					throw ex;
					
				}

				this.jjtGetChild(i).analyze(methodDescriptor, variables);
            }
		}

		if (!isMain) {
			String analyzeReturnString = this.jjtGetChild(this.jjtGetNumChildren() - 1).analyze(methodDescriptor, variables);
			String functionReturnString = methodDescriptor.getReturn().getType();
			if (!analyzeReturnString.equals(functionReturnString)) {
				this.parser.handleSemanticError(new SemanticParseException("Return type of function " + (String)this.jjtGetValue() + " does not correspond: supposed to be " + functionReturnString + " , but found ->" + analyzeReturnString), this.jjtGetChild(this.jjtGetNumChildren() - 1));
			}
			this.returnType = methodDescriptor.getReturn().getType();

			return this.returnType;
		}
		else {
			this.returnType = "void";
			return this.returnType;
		}
	}

	public void generateCode(Descriptor descriptor) {
		ClassDescriptor classDescriptor = ((ClassDescriptor) descriptor);
		MethodDescriptor methodDescriptor = null;
		boolean isMain = "main".equals((String)this.jjtGetValue());
		
		if(isMain)
			methodDescriptor = classDescriptor.getMainFunction();
	
		for(int i = 0; i < this.jjtGetNumChildren(); i++){
			
			if(this.jjtGetChild(i) instanceof ASTParamList){
				
				String functionName = (String)this.jjtGetValue();
				ArrayList<ASTType> params =  ((ASTParamList)this.jjtGetChild(i)).getParamTypes() ;
				methodDescriptor = isMain ? classDescriptor.getMainFunction() :classDescriptor.getMethod(functionName,params);
				
				this.parser.addBatchInstructions(JVMHelper.getMethodDescription(methodDescriptor));
			}
			else if(this.jjtGetChild(i) instanceof ASTBody){

				this.jjtGetChild(i).generateCode(methodDescriptor);
            }
		}

		if (!this.returnType.equals("void"))
			this.jjtGetChild(this.jjtGetNumChildren() - 1).generateCode(methodDescriptor);
		
		this.parser.addInstruction(JVMHelper.getReturnInstruction(this.returnType));

		this.parser.setCurrentStackLimit();
		this.parser.addInstruction(new JVMInstruction(".end method",0));
        return;
	}

	public void generateCFG(List<BitSet> use, List<BitSet> def, List<BitSet> succ, MethodDescriptor mDescriptor) {
		for (int i = 0; i < this.jjtGetNumChildren(); i++) {
			if (this.jjtGetChild(i) instanceof ASTBody || this.jjtGetChild(i) instanceof ASTReturn) 
				this.jjtGetChild(i).generateCFG(use, def, succ, mDescriptor);
		}

		succ.get(succ.size()-1).clear();
	}
}
/* JavaCC - OriginalChecksum=e01bdf01dd9e8aa606ef225a59a26df3 (do not edit this line) */
