import exceptions.SemanticParseException;
import java.util.List;
import java.util.BitSet;
import java.util.HashSet; 

/* Generated By:JJTree: Do not edit this line. ASTCondition.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public class ASTCondition extends SimpleNode {
    public ASTCondition(int id) {
        super(id);
		this.returnType = "boolean";
    }

    public ASTCondition(Parser p, int id) {
        super(p, id);
		this.returnType = "boolean";
    }

    @Override
	public String analyze(Descriptor descriptor, HashSet<String> variables) throws SemanticParseException{
		MethodDescriptor functionST = (MethodDescriptor) descriptor;

		SimpleNode node = this.jjtGetChild(0);
		
		String type = node.analyze(functionST, variables);

		if ( !type.equals(this.returnType))
			this.parser.handleSemanticError(new SemanticParseException("Wrong type in condition: " + "[" + type + "]"), this);

		return this.returnType;
	}

	public void generateCode(Descriptor descriptor) {
        for (int i = 0; i < this.jjtGetNumChildren(); i++)
                this.jjtGetChild(i).generateCode(descriptor);
	}
	
	public void generateCFG(List<BitSet> use, List<BitSet> def, List<BitSet> succ, MethodDescriptor mDescriptor) {
		BitSet useNode = new BitSet(mDescriptor.getLocalsCount());
		BitSet defNode = new BitSet(mDescriptor.getLocalsCount());
		BitSet succNode = new BitSet();

		for (int i = 0; i < this.jjtGetNumChildren(); i++)
			this.jjtGetChild(i).generateCFGNode(useNode, defNode, false, mDescriptor);

		use.add(useNode);
		def.add(defNode);
		succ.add(succNode);

		succNode.set(succ.size());
		// if (succ.size() > 1)
		// 	succ.get(succ.size() - 2).set(succ.size() - 1);
	}
}
/*
 * JavaCC - OriginalChecksum=0e7cf8cafe119dc877b2591e261cf2b5 (do not edit this
 * line)
 */
