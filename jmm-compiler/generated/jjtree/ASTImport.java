import exceptions.SemanticParseException;
import java.util.HashSet; 

/* Generated By:JJTree: Do not edit this line. ASTImport.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public class ASTImport extends SimpleNode {
	private String className;
	private String methodName;
	private boolean isStatic;

	public ASTImport(int id) {
		super(id);
	}

	public ASTImport(Parser p, int id) {
		super(p, id);
		this.isStatic = false;
	}

	public void setClassName(String name) {
		this.className = name;
	}

	public String getClassName() {
		return this.className;
	}

	public void setMethodName(String name) {
		this.methodName = name;
	}

	public String getMethodName() {
		return this.methodName;
	}

	public void setStatic(boolean isStatic) {
		this.isStatic = isStatic;
	}

	public boolean isStatic() {
		return this.isStatic;
	}

	public String toString() {
		return ParserTreeConstants.jjtNodeName[id] + "[" + (isStatic ? "static " : "") + this.className + "." + (this.methodName == null ? "<init>" : this.methodName) + "]";
	}

	@Override
	public String analyze(Descriptor descriptor, HashSet<String> variables) throws SemanticParseException {
		if (methodName == null) {
			if (isStatic)
				throw new SemanticParseException("Constructor can't be static");

			if (this.jjtGetNumChildren() != 0) {

				if (this.jjtGetChild(1).jjtGetNumChildren() == 1 && ! ((String)  this.jjtGetChild(1).jjtGetChild(0).value).equals("void"))
					throw new SemanticParseException("Constructor can't have a return value");

			}
		}
		
		return "";
	}
}
/* JavaCC - OriginalChecksum=102b8623e78d8554f34992788a15d8e1 (do not edit this line) */
