import exceptions.SemanticParseException;
import java.util.Set;
import java.util.Map;

/* Generated By:JJTree: Do not edit this line. ASTAnd.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public class ASTAnd extends SimpleNode {
	public ASTAnd(int id) {
		super(id);
		this.returnType = "boolean";
	}

	public ASTAnd(Parser p, int id) {
		super(p, id);
		this.returnType = "boolean";
	}

	@Override
	public String analyze(Descriptor descriptor, Set<String> variables) throws SemanticParseException{
		MethodDescriptor functionST = (MethodDescriptor) descriptor;

		SimpleNode lhsNode = this.jjtGetChild(0);
		SimpleNode rhsNode = this.jjtGetChild(1);

		String lhsType = lhsNode.analyze(functionST, variables);
		String rhsType = rhsNode.analyze(functionST, variables);

		if ( !lhsType.equals(this.returnType) || !rhsType.equals(this.returnType))
			this.parser.handleSemanticError(new SemanticParseException("Wrong types in conjuction: " + lhsNode.jjtGetValue() + "[" + lhsType + "]" + " and " + rhsNode.jjtGetValue() + "[" + rhsType + "]"), this);

		return this.returnType;
	}

	public void optimize(Descriptor descriptor, Map<String, Map<String, Integer>> variables) {
		SimpleNode lhsNode = this.jjtGetChild(0);
		SimpleNode rhsNode = this.jjtGetChild(1);

		lhsNode.optimize(descriptor, variables);
		rhsNode.optimize(descriptor, variables);

		// If both childs are Booleans substitute this node with its result
		if (this.jjtGetChild(0) instanceof ASTBoolean && this.jjtGetChild(1) instanceof ASTBoolean) {
			ASTBoolean constNode = new ASTBoolean(this.parser, ParserTreeConstants.JJTBOOLEAN);

			boolean leftOperand = this.jjtGetChild(0).value.equals("true");
			boolean rightOperand = this.jjtGetChild(1).value.equals("true");
			
			if (leftOperand && rightOperand) {
				constNode.value = "true";
			} else {
				constNode.value = "false";
			}

			((SimpleNode) this.jjtGetParent()).replaceChild(this, constNode);
			return;
		}
		// If only one is boolean but its false, the other one is not needed (we already know the result is false)
		else if(this.jjtGetChild(0) instanceof ASTBoolean && this.jjtGetChild(0).value.equals("false")){
			ASTBoolean constNode = new ASTBoolean(this.parser, ParserTreeConstants.JJTBOOLEAN);
			constNode.value = "false";
			((SimpleNode) this.jjtGetParent()).replaceChild(this, constNode);
			return;
		}
		else if(this.jjtGetChild(1) instanceof ASTBoolean && this.jjtGetChild(1).value.equals("false")){
			ASTBoolean constNode = new ASTBoolean(this.parser, ParserTreeConstants.JJTBOOLEAN);
			constNode.value = "false";
			((SimpleNode) this.jjtGetParent()).replaceChild(this, constNode);
			return;
		}

		// Other wise, if we shouldn't simplify (p.e. in 1st phase of conditions) set calcValue with the calculated value
		Integer leftOperand = this.jjtGetChild(0).getCalcValue();
		Integer rightOperand = this.jjtGetChild(1).getCalcValue();
		if(leftOperand == null && this.jjtGetChild(0) instanceof ASTBoolean)
			leftOperand = this.jjtGetChild(0).value.equals("true") ? 1 : 0;
		else if(rightOperand == null && this.jjtGetChild(1) instanceof ASTBoolean)
			rightOperand = this.jjtGetChild(1).value.equals("true") ? 1 : 0;
		if(variables.get("#cond#") != null && leftOperand != null && rightOperand != null){
			boolean left = leftOperand == 1;
			boolean right = rightOperand == 1;
			this.calcValue = left && right ? 1 : 0;		
		}
	}

	@Override
	public void generateCode(Descriptor descriptor) {

		SimpleNode lhsNode = this.jjtGetChild(0);
		SimpleNode rhsNode = this.jjtGetChild(1);
		lhsNode.generateCode(descriptor);
		rhsNode.generateCode(descriptor);
		parser.addInstruction(new JVMInstruction("iand",-1));
	}
}
/*
 * JavaCC - OriginalChecksum=1766d5431be81e19119cf5feee80cd49 (do not edit this
 * line)
 */
