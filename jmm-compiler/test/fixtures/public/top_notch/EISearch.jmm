import static io.println(int) void;
import static io.println(boolean) void;
import static io.stringToBoolean(String) boolean;
import static io.stringToInt(String) int;
import static MathUtils.random(int,int) int;

/* Extremely Inefficient Search*/
class EISearch {

    public int bogoSort(int[] arr){

        while(! this.isSorted(arr)){
            this.shuffle(arr);
        }

        return 0;
    }

    public int bubbleSort(int[] arr) 
    { 
        int n; 
        int j;
        int i;
        int temp;
        n = arr.length;

        i = 0;

        while( i < n - 1){
            j = 0;
            while(j < n - i - 1){

                if ( arr[j+1] < arr[j] ) 
                { 
                    // swap arr[j+1] and arr[i] 
                    temp = arr[j]; 
                    arr[j] = arr[j+1]; 
                    arr[j+1] = temp; 
                }else{

                }

                j = j + 1;
            }
            i = i + 1;
        }

        return 0;
    } 

    public boolean isSorted(int[] array) {

        int i;
        boolean result;
        i = 0;
        result = true;

        while(i < array.length - 1){

            if (array[i + 1] < array[i]){

                result =  false;
            }
            else{

            }
            i = i + 1;
        }

        return result;
    }
  
    /* Prints the array */
    public int printArray(int[] array) 
    { 
        int n;
        int i; 
        n = array.length; 
        i = 0;
        while(i < n){
            io.println(array[i]);
            i = i + 1;
        }

        return 0;
    } 

    public int shuffle(int[] array) {
				
        int randomIndexToSwap;
        int temp;
        int i;
        i = 0;
		while( i < array.length){

            randomIndexToSwap = MathUtils.random(0,array.length);
			temp = array[randomIndexToSwap];
			array[randomIndexToSwap] = array[i];
			array[i] = temp;
            i = i + 1;
        }
        return 0;
    }

    public boolean equals(int a, int b){
        return !(a < b) && !(b < a); 
    }
    
    public int binarySearch(int[] arr, int l, int r, int x) 
    { 
        int mid;
        int result;
        mid = 0;
        if ( !(r < l)) { 
            mid = l + (r - l) / 2; 
  
            if (this.equals(arr[mid], x)){

                result = mid; 
            }
            else{
                if (x < arr[mid] ){
                    result = this.binarySearch(arr, l, mid - 1, x); 
                } 
                else{
                    result = this.binarySearch(arr, mid + 1, r, x); 
                }
            }
        } 
        else{
            result = 0 -1; 
        }
  
        return result;

    } 
  
    /*java EISearch value superInefficient 
        Search for value in an array by sorting it and applying a binary search. If superInefficient is false BubbleSort(O(n^2)) is used, if it's true, Bogosort(O(oo)) is used
    */
    public static void main(String[] args) 
    { 
        EISearch searcher;
        int searchResult;
        int[] array; 
        int value;
        boolean superInef;

        value = io.stringToInt(args[0]);
        superInef = io.stringToBoolean(args[1]);
        
        array = new int[12];
        array[0] = 83;
        array[1] = 34;
        array[2] = 25;
        array[3] = 0-5;
        array[4] = 12;
        array[5] = 22;
        array[6] = 43;
        array[7] = 90;
        array[8] = 64;
        array[9] = 3;
        array[10] = 1;
        array[11] = 22;
        searcher = new EISearch(); 

        if(superInef){
            
            searcher.bogoSort(array); 
        }else{

            searcher.bubbleSort(array); 
        }
        searcher.printArray(array); 
        searchResult = searcher.binarySearch(array, 0, array.length - 1, value);

        if(searchResult < 0){
            io.println(false);
        }
        else{
            io.println(true);
        }

    } 
    
}