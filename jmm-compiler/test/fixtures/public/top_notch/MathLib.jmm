import static io.println(int) void;
import static io.println(boolean) void;
import Matrix.getWidth() int;
import Matrix.getHeight() int;
import Matrix.getElement(int, int) int;
import Matrix.setElement(int, int,int) int;
import Matrix.create(int, int) int;
import SquareMatrix.createSquare(int) int;
import SquareMatrix.createIdentity(int) int;
import SquareMatrix.determinantOf3x3() int;
import SquareMatrix.setElement(int, int,int) int;
import static PrintMatrix.printMatrix(Matrix) void;
import static PrintMatrix.printMatrix(SquareMatrix) void;

class MathLib {

    public int getDotProduct(int[] a, int[] b){

        int sum;
        int i;
        
        i = 0;

        if(!this.integerEquals(a.length, b.length)){
            sum = 0;
        }
        else{
            sum = 0;
            while(i < a.length){

                sum = sum + a[i] * b[i];
    
                i = i + 1;
            }
        }

        return sum;
    }
    
    public int getFactorial(int num){

        int result;
        result = 1;

        while(0 < num){
            result = result * num;
            num = num - 1;
        }

        return result;
    }

    public int combinations(int n, int k){

        return this.getFactorial(n)/(this.getFactorial(k) * this.getFactorial(n - k));
    }

    public boolean logicalOR(boolean a, boolean b){

        return !((!a) && (!b));
    }

    public boolean logicalXOR(boolean a, boolean b){

        return this.logicalOR(a && !b, !a && b); 
    }

    public boolean integerEquals(int a, int b){

        return !(a < b) && !(b < a); 
    }

    public Matrix matrixMultiply(Matrix a, Matrix b){

        Matrix result;
        int i;
        int j;
        int k;
        result = new Matrix();
        result.create(a.getWidth(), a.getHeight());
        i = 0;        
        while(i < a.getHeight()){
            j = 0;
            while (j < b.getWidth()) {
                k = 0;
                while (k < a.getWidth()) {

                    result.setElement(i,j, result.getElement(i,j)+ a.getElement(i,k) * b.getElement(k,j));
                    k = k + 1;
                }
                j = j + 1;
            }
            i = i + 1;
        }

        return result;
    }




    public static void main(String[] agrs){

        MathLib mlib;
        Matrix m1;
        Matrix m2;
        Matrix m3;
        SquareMatrix m4;
        SquareMatrix m5;
        int[] a ;  
        int[] b ;
        m1 = new Matrix();
        m2 = new Matrix();
        m4 = new SquareMatrix();
        m5 = new SquareMatrix();
        m1.create(3,3);
        m2.create(3,3);
        m5.createSquare(3);
        a = new int[2 + 3/3];
        b = new int[3 + 0*0];  
        mlib = new MathLib();
        a[0] = 1;
        a[1] = 2;
        a[2] = 3;
        b[0] = 2;
        b[1] = 2;
        b[2] = 2;
        io.println(mlib.getFactorial(4));               //24
        io.println(mlib.integerEquals(4,4));            // true
        io.println(mlib.integerEquals(4,5));            // false
        io.println(mlib.logicalXOR(true,true));         // false
        io.println(mlib.logicalXOR(true,false));        // true
        io.println(mlib.logicalXOR(false,false));       // false
        io.println(mlib.logicalOR(true,true));          // true
        io.println(mlib.logicalOR(true,false));         // true
        io.println(mlib.logicalOR(false,false));        // false
        io.println(mlib.combinations(5,2));             // 10
        io.println(mlib.getDotProduct(a,b));            // 12

        m1.setElement(0,0,10);
        m1.setElement(0,1,20);
        m1.setElement(0,2,10);
        m1.setElement(1,0,4);
        m1.setElement(1,1,5);
        m1.setElement(1,2,6);
        m1.setElement(2,0,2);
        m1.setElement(2,1,3);
        m1.setElement(2,2,5);

        m2.setElement(0,0,3);
        m2.setElement(0,1,2);
        m2.setElement(0,2,4);
        m2.setElement(1,0,3);
        m2.setElement(1,1,3);
        m2.setElement(1,2,9);
        m2.setElement(2,0,4);
        m2.setElement(2,1,4);
        m2.setElement(2,2,2);

        m5.setElement(0,0,10);
        m5.setElement(0,1,20);
        m5.setElement(0,2,10);
        m5.setElement(1,0,4);
        m5.setElement(1,1,5);
        m5.setElement(1,2,6);
        m5.setElement(2,0,2);
        m5.setElement(2,1,3);
        m5.setElement(2,2,5);

        m3 = mlib.matrixMultiply(m1, m2);
        m4.createIdentity(4);
        PrintMatrix.printMatrix(m1);
        PrintMatrix.printMatrix(m2);
        PrintMatrix.printMatrix(m3);
        PrintMatrix.printMatrix(m4);

        io.println(m5.determinantOf3x3());
    }
}