/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Calculator.jj */
/*@egen*/options {
 LOOKAHEAD=1;
}
PARSER_BEGIN(Calculator)
import java.util.HashMap;

public class Calculator/*@bgen(jjtree)*/implements CalculatorTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTCalculatorState jjtree = new JJTCalculatorState();

/*@egen*/
 public static HashMap<String, Integer> variables = new HashMap<String, Integer>();

 public static void main(String args[]) throws ParseException {
System.out.println("Calculator that accepts expressions with integers, +,-,*,/,(, and ).");
System.out.println("Write an arithmetic expression:");
 Calculator myCalc = new Calculator(System.in);
 SimpleNode root = myCalc.Program();
 root.dump("");

SimpleNode lastExpression = (SimpleNode) root.jjtGetChild(root.jjtGetNumChildren() - 1);

 System.out.println("Expression Value: "+myCalc.eval(lastExpression));
 }

 public static int eval(SimpleNode node) {
    if(node.jjtGetNumChildren() == 0) // leaf node with integer value
        return node.val;
    else if(node.jjtGetNumChildren() == 1) { // only one child
        return Calculator.eval((SimpleNode) node.jjtGetChild(0));
    }
    
    SimpleNode lhs = (SimpleNode) node.jjtGetChild(0); //left child
    SimpleNode rhs = (SimpleNode) node.jjtGetChild(1); // right child
    switch(node.id) {
        case CalculatorTreeConstants.JJTADD : return eval( lhs ) + eval( rhs );
        case CalculatorTreeConstants.JJTSUB : return eval( lhs ) - eval( rhs );
        case CalculatorTreeConstants.JJTMUL : return eval( lhs ) * eval( rhs );
        case CalculatorTreeConstants.JJTDIV : return eval( lhs ) / eval( rhs );
        default : // abort
            System.out.println("Ilegal operator!");
            System.exit(1);
    }
    return 0;
 }
}
PARSER_END(Calculator)
SKIP :
{
" " | "\r" | "\t"
}

TOKEN:
{
 < INTEGER: (["0"-"9"])+ >
| < LF: "\n" >
| < SYMBOL: ["A"-"Z", "a"-"z"](["0"-"9", "A"-"Z", "a"-"z"])* >
}

SimpleNode Program(): {/*@bgen(jjtree) Program */
                        SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/ System.out.println("program"); }
{/*@bgen(jjtree) Program */
    try {
/*@egen*/
    (Instruction() (<LF>)?)+/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

void Instruction()      : { System.out.println("instruction"); }
{
    (
    LOOKAHEAD(2) Expr4()
    | Expr1(1)
    ) ";"
}

SimpleNode Expr1(int sign)            : {/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
 try {
/*@egen*/
 Expr2(sign)
 [
 ("+"/*@bgen(jjtree) #Add( 2) */
      {
        SimpleNode jjtn001 = new SimpleNode(JJTADD);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/ Expr2(sign)/*@bgen(jjtree)*/
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          throw (RuntimeException)jjte001;
        }
        if (jjte001 instanceof ParseException) {
          throw (ParseException)jjte001;
        }
        throw (Error)jjte001;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  2);
        }
      }
/*@egen*/        
 | "-"/*@bgen(jjtree) #Sub( 2) */
       {
         SimpleNode jjtn002 = new SimpleNode(JJTSUB);
         boolean jjtc002 = true;
         jjtree.openNodeScope(jjtn002);
       }
       try {
/*@egen*/ Expr2(sign)/*@bgen(jjtree)*/
       } catch (Throwable jjte002) {
         if (jjtc002) {
           jjtree.clearNodeScope(jjtn002);
           jjtc002 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte002 instanceof RuntimeException) {
           throw (RuntimeException)jjte002;
         }
         if (jjte002 instanceof ParseException) {
           throw (ParseException)jjte002;
         }
         throw (Error)jjte002;
       } finally {
         if (jjtc002) {
           jjtree.closeNodeScope(jjtn002,  2);
         }
       }
/*@egen*/        )
 ]/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
 }
/*@egen*/
 { return jjtn000; }/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void Expr2(int sign)      : {} // 1: positive; -1: negative
{
 Expr3(sign)
 ("*"/*@bgen(jjtree) #Mul( 2) */
      {
        SimpleNode jjtn001 = new SimpleNode(JJTMUL);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/ Expr3(1)/*@bgen(jjtree)*/
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          throw (RuntimeException)jjte001;
        }
        if (jjte001 instanceof ParseException) {
          throw (ParseException)jjte001;
        }
        throw (Error)jjte001;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  2);
        }
      }
/*@egen*/        
 | "/"/*@bgen(jjtree) #Div( 2) */
       {
         SimpleNode jjtn002 = new SimpleNode(JJTDIV);
         boolean jjtc002 = true;
         jjtree.openNodeScope(jjtn002);
       }
       try {
/*@egen*/ Expr3(1)/*@bgen(jjtree)*/
       } catch (Throwable jjte002) {
         if (jjtc002) {
           jjtree.clearNodeScope(jjtn002);
           jjtc002 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte002 instanceof RuntimeException) {
           throw (RuntimeException)jjte002;
         }
         if (jjte002 instanceof ParseException) {
           throw (ParseException)jjte002;
         }
         throw (Error)jjte002;
       } finally {
         if (jjtc002) {
           jjtree.closeNodeScope(jjtn002,  2);
         }
       }
/*@egen*/        
 )? 
}

void Expr3(int sign)      : {Token t;}
{
 t=<INTEGER>/*@bgen(jjtree) Integer */
             {
               SimpleNode jjtn001 = new SimpleNode(JJTINTEGER);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*//*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn001, true);
               jjtc001 = false;
             }
/*@egen*/ {
    jjtn001.val = sign * Integer.parseInt(t.image);
  }/*@bgen(jjtree)*/
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001, true);
               }
             }
/*@egen*/          
  | 
 t = <SYMBOL>/*@bgen(jjtree) Symbol */
              {
                SimpleNode jjtn002 = new SimpleNode(JJTSYMBOL);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
              }
              try {
/*@egen*//*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn002, true);
                jjtc002 = false;
              }
/*@egen*/ {        
     if (! Calculator.variables.containsKey(t.image)) {
        System.out.println("Use of an unassigned symbol!");
        System.exit(1);
      }
     jjtn002.val = sign * Calculator.variables.get(t.image);
 }/*@bgen(jjtree)*/
              } finally {
                if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002, true);
                }
              }
/*@egen*/        
 | "-" Expr3(-1)
 | "(" Expr1(sign) ")"
}

void Expr4()            : {/*@bgen(jjtree) Assignment */
                           SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1; SimpleNode node;}
{/*@bgen(jjtree) Assignment */
    try {
/*@egen*//*@bgen(jjtree) Symbol */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTSYMBOL);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    t1 = <SYMBOL>/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/        
    "="
    node = Expr1(1)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { Calculator.variables.put(t1.image, Calculator.eval(node));}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}