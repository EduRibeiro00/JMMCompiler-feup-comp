options {
 LOOKAHEAD=1;
}
PARSER_BEGIN(Calculator)
import java.util.HashMap;

public class Calculator
{
 public static HashMap<String, Integer> variables = new HashMap<String, Integer>();

 public static void main(String args[]) throws ParseException {
System.out.println("Calculator that accepts expressions with integers, +,-,*,/,(, and ).");
System.out.println("Write an arithmetic expression:");
 Calculator myCalc = new Calculator(System.in);
 SimpleNode root = myCalc.Program();
 root.dump("");

SimpleNode lastExpression = (SimpleNode) root.jjtGetChild(root.jjtGetNumChildren() - 1);

 System.out.println("Expression Value: "+myCalc.eval(lastExpression));
 }

 public static int eval(SimpleNode node) {
    if(node.jjtGetNumChildren() == 0) // leaf node with integer value
        return node.val;
    else if(node.jjtGetNumChildren() == 1) { // only one child
        return Calculator.eval((SimpleNode) node.jjtGetChild(0));
    }
    
    SimpleNode lhs = (SimpleNode) node.jjtGetChild(0); //left child
    SimpleNode rhs = (SimpleNode) node.jjtGetChild(1); // right child
    switch(node.id) {
        case CalculatorTreeConstants.JJTADD : return eval( lhs ) + eval( rhs );
        case CalculatorTreeConstants.JJTSUB : return eval( lhs ) - eval( rhs );
        case CalculatorTreeConstants.JJTMUL : return eval( lhs ) * eval( rhs );
        case CalculatorTreeConstants.JJTDIV : return eval( lhs ) / eval( rhs );
        default : // abort
            System.out.println("Ilegal operator!");
            System.exit(1);
    }
    return 0;
 }
}
PARSER_END(Calculator)
SKIP :
{
" " | "\r" | "\t"
}

TOKEN:
{
 < INTEGER: (["0"-"9"])+ >
| < LF: "\n" >
| < SYMBOL: ["A"-"Z", "a"-"z"](["0"-"9", "A"-"Z", "a"-"z"])* >
}

SimpleNode Program(): { System.out.println("program"); }
{
    (Instruction() (<LF>)?)+ 
    { return jjtThis; } 
}

void Instruction() #void: { System.out.println("instruction"); }
{
    (
    LOOKAHEAD(2) Expr4()
    | Expr1(1)
    ) ";"
}

SimpleNode Expr1(int sign) #Expression: {}
{
 Expr2(sign)
 [
 ("+" Expr2(sign) #Add(2)
 | "-" Expr2(sign) #Sub(2))
 ]
 { return jjtThis; }
}

void Expr2(int sign) #void: {} // 1: positive; -1: negative
{
 Expr3(sign)
 ("*" Expr3(1) #Mul(2)
 | "/" Expr3(1) #Div(2)
 )? 
}

void Expr3(int sign) #void: {Token t;}
{
 t=<INTEGER> {
    jjtThis.val = sign * Integer.parseInt(t.image);
  } #Integer 
  | 
 t = <SYMBOL> {        
     if (! Calculator.variables.containsKey(t.image)) {
        System.out.println("Use of an unassigned symbol!");
        System.exit(1);
      }
     jjtThis.val = sign * Calculator.variables.get(t.image);
 } #Symbol
 | "-" Expr3(-1)
 | "(" Expr1(sign) ")"
}

void Expr4() #Assignment: {Token t1; SimpleNode node;}
{
    t1 = <SYMBOL> #Symbol
    "="
    node = Expr1(1)
    { Calculator.variables.put(t1.image, Calculator.eval(node));}
}